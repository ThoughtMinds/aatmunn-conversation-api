{
	"info": {
		"_postman_id": "b365c276-c715-4a64-a275-ab9195de0559",
		"name": "API Modules",
		"description": "## API Endpoints:\n\n1. Database\n    \n2. Navigation",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "11946508",
		"_collection_link": "https://insertcheesyline.postman.co/workspace/Aatmun-PoC~c32a6ddc-233f-47df-8fd5-9b254af95109/collection/11946508-b365c276-c715-4a64-a275-ab9195de0559?action=share&source=collection_link&creator=11946508"
	},
	"item": [
		{
			"name": "API",
			"item": [
				{
					"name": "Index",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check if key exists\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.have.keys(['version'])",
									"});",
									"",
									"pm.execution.setNextRequest(\"List Intents\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "Orchestrator",
			"item": [
				{
					"name": "Identify Intent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"query\": \"go to the home page\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/orchestrator/identify_intent/"
					},
					"response": []
				}
			]
		},
		{
			"name": "Navigation",
			"item": [
				{
					"name": "Get Navigation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"query\": \"go to the home page\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/navigation/get_navigation/"
					},
					"response": []
				},
				{
					"name": "Test Navigation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "/path/to/your/test_cases.xlsx"
								}
							]
						},
						"url": "{{baseUrl}}/api/navigation/test_navigation/"
					},
					"response": []
				}
			]
		},
		{
			"name": "Navigation Intents",
			"item": [
				{
					"name": "List Intents",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse JSON safely",
									"let responseData;",
									"try {",
									"    responseData = pm.response.json();",
									"} catch (e) {",
									"    pm.test(\"Response is valid JSON\", function () {",
									"        pm.expect(e).to.be.null;",
									"    });",
									"    throw new Error(\"Response is not valid JSON\");",
									"}",
									"",
									"// Test if response is an array",
									"pm.test(\"Response is an array\", function () {",
									"    pm.expect(responseData).to.be.an('array');",
									"});",
									"",
									"// Test each item in the array for required keys and types",
									"pm.test(\"Check if each item has required keys and types\", function () {",
									"    responseData.forEach(item => {",
									"        // Check required keys",
									"        pm.expect(item).to.include.keys('intent_id', 'intent', 'description', 'parameters', 'required', 'responses');",
									"        ",
									"        // Validate types",
									"        pm.expect(item.intent_id).to.be.a('number');",
									"        pm.expect(item.intent).to.be.a('string');",
									"        pm.expect(item.description).to.be.a('string');",
									"        pm.expect(item.parameters).to.be.an('object');",
									"        pm.expect(item.required).to.be.an('array');",
									"        pm.expect(item.responses).to.be.an('object');",
									"        ",
									"        // Validate parameters object",
									"        ",
									"        // Validate required array",
									"        ",
									"        // Validate responses object",
									"        pm.expect(item.responses).to.include.keys('web', 'android', 'ios');",
									"        pm.expect(item.responses.web).to.be.a('string');",
									"        pm.expect(item.responses.android).to.be.a('string');",
									"        pm.expect(item.responses.ios).to.be.a('string');",
									"    });",
									"});",
									"",
									"// Store first intent_id as environment variable if tests pass",
									"pm.test(\"Store first intent_id\", function () {",
									"    if (responseData.length > 0) {",
									"        pm.collectionVariables.set(\"intent_id\", responseData[0].intent_id);",
									"    } else {",
									"        pm.expect.fail(\"No intents found in response\");",
									"    }",
									"});",
									"",
									"pm.execution.setNextRequest(\"Get Intent By ID\");",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/navigation_intents/intents/"
					},
					"response": []
				},
				{
					"name": "Get Intent By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse JSON safely",
									"let responseData;",
									"try {",
									"    responseData = pm.response.json();",
									"} catch (e) {",
									"    pm.test(\"Response is valid JSON\", function () {",
									"        pm.expect(e).to.be.null;",
									"    });",
									"    throw new Error(\"Response is not valid JSON\");",
									"}",
									"",
									"// Test if response is an object",
									"pm.test(\"Response is an object\", function () {",
									"    pm.expect(responseData).to.be.an('object');",
									"});",
									"",
									"// Test for required keys and types",
									"pm.test(\"Check if response has required keys and types\", function () {",
									"    // Check required keys",
									"    pm.expect(responseData).to.include.keys('intent_id', 'intent', 'description', 'parameters', 'required', 'responses');",
									"    ",
									"    // Validate types",
									"    pm.expect(responseData.intent_id).to.be.a('number');",
									"    pm.expect(responseData.intent).to.be.a('string');",
									"    pm.expect(responseData.description).to.be.a('string');",
									"    pm.expect(responseData.parameters).to.be.an('object');",
									"    pm.expect(responseData.required).to.be.an('array');",
									"    pm.expect(responseData.responses).to.be.an('object');",
									"    ",
									"    // Validate parameters object",
									"    pm.expect(responseData.parameters).to.include.keys('app_id');",
									"    pm.expect(responseData.parameters.app_id).to.equal('integer');",
									"    ",
									"    // Validate required array",
									"    pm.expect(responseData.required).to.include('app_id');",
									"    ",
									"    // Validate responses object",
									"    pm.expect(responseData.responses).to.include.keys('web', 'android', 'ios');",
									"    pm.expect(responseData.responses.web).to.be.a('string');",
									"    pm.expect(responseData.responses.android).to.be.a('string');",
									"    pm.expect(responseData.responses.ios).to.be.a('string');",
									"});",
									"",
									"pm.execution.setNextRequest(\"Create Intent\");",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/navigation_intents/intents/{{intent_id}}"
					},
					"response": []
				},
				{
					"name": "Create Intent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Fixed syntax error in the test script",
									"// Test for status code 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse JSON safely",
									"let responseData;",
									"try {",
									"    responseData = pm.response.json();",
									"} catch (e) {",
									"    pm.test(\"Response is valid JSON\", function () {",
									"        pm.expect(e).to.be.null;",
									"    });",
									"    throw new Error(\"Response is not valid JSON\");",
									"}",
									"",
									"// Test if response is an object",
									"pm.test(\"Response is an object\", function () {",
									"    pm.expect(responseData).to.be.an('object');",
									"});",
									"",
									"// Test for required keys and types",
									"pm.test(\"Check if response has required keys and types\", function () {",
									"    // Check required keys",
									"    pm.expect(responseData).to.include.keys('intent_id', 'intent', 'description', 'parameters', 'required', 'responses');",
									"    ",
									"    // Validate types",
									"    pm.expect(responseData.intent_id).to.be.a('number');",
									"    pm.expect(responseData.intent).to.be.a('string');",
									"    pm.expect(responseData.description).to.be.a('string');",
									"    pm.expect(responseData.parameters).to.be.an('object');",
									"    pm.expect(responseData.required).to.be.an('array');",
									"    pm.expect(responseData.responses).to.be.an('object');",
									"    ",
									"});",
									"",
									"// Store ephemeral_intent_id as environment variable if tests pass",
									"pm.test(\"Store ephemeral_intent_id\", function () {",
									"    if (responseData.intent_id) {",
									"        pm.collectionVariables.set(\"ephemeral_intent_id\", responseData.intent_id);",
									"    } else {",
									"        pm.expect.fail(\"No intent_id found in response\");",
									"    }",
									"});",
									"",
									"pm.execution.setNextRequest(\"Delete Intent By ID\");",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"intent\": \"navigate_to_sample_page\",\r\n    \"description\": \"Directs the user to a sample page for demonstration purposes.\",\r\n    \"parameters\": {\r\n        \"sample_id\": \"sample_id\"\r\n    },\r\n    \"required\": [\r\n        \"sample_id\"\r\n    ],\r\n    \"responses\": {\r\n        \"web\": \"https://example.com/sample_page\",\r\n        \"android\": \"SampleActivity\",\r\n        \"ios\": \"SampleView\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/navigation_intents/intents/"
					},
					"response": []
				},
				{
					"name": "Update Intent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"intent\": \"navigate_to_updated_page\",\r\n    \"description\": \"Directs the user to an updated page for demonstration purposes.\",\r\n    \"parameters\": {\r\n        \"updated_id\": \"updated_id\"\r\n    },\r\n    \"required\": [\r\n        \"updated_id\"\r\n    ],\r\n    \"responses\": {\r\n        \"web\": \"https://example.com/updated_page\",\r\n        \"android\": \"UpdatedActivity\",\r\n        \"ios\": \"UpdatedView\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/navigation_intents/intents/{{intent_id}}"
					},
					"response": []
				},
				{
					"name": "Delete Intent By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test for JSON response containing \"ok\": true",
									"pm.test(\"Response body contains ok: true\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.ok).to.be.true;",
									"});",
									"",
									"pm.execution.setNextRequest(null);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/api/navigation_intents/intents/{{ephemeral_intent_id}}"
					},
					"response": []
				},
				{
					"name": "Get Intent Count",
					"event": [

						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/navigation_intents/get_intent_count"
					},
					"response": []
				}
			]
		},
		{
			"name": "Summarization",
			"item": [
				{
					"name": "Get Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"query\": \"Summarize the latest news\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/summarization/get_summary/"
					},
					"response": []
				}
			]
		},
		{
			"name": "Task Execution",
			"item": [
				{
					"name": "Execute Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"query\": \"Book a flight to New York\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/task_execution/execute_task/"
					},
					"response": []
				}
			]
		},
		{
			"name": "Logging",
			"item": [
				{
					"name": "Get Audit Log",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/logging/get_audit_log/"
					},
					"response": []
				}
			]
		},
		{
			"name": "Metadata",
			"item": [
				{
					"name": "Get Dashboard Stats",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/metadata/get_dashboard_stats/"
					},
					"response": []
				}
			]
		},
		{
			"name": "Ollama",
			"item": [
				{
					"name": "Index",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code\", function () {",
									"    pm.response.to.have.status(200);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{ollamaUrl}}"
					},
					"response": []
				},
				{
					"name": "List Models",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Ollama has at least two models\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.models).to.be.an('array').that.has.lengthOf(2);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{ollamaUrl}}/api/tags"
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "aatmun-api:8000"
		},
		{
			"key": "ollamaUrl",
			"value": "ollama:11434",
			"type": "string"
		},
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "intent_id",
			"value": "1"
		},
		{
			"key": "ephemeral_intent_id",
			"value": ""
		}
	]
}